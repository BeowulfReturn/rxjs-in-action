{"version":3,"file":"runtime.js","sources":["utils/url.js","utils/tag.js","initial.js","console.js","editors.js","runtime.js"],"sourcesContent":["/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\nexport function getUrlParams(url) {\r\n  let match,\r\n    pl     = /\\+/g,  // Regex for replacing addition symbol with a space\r\n    search = /([^&=]+)=?([^&]*)/g,\r\n    decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\r\n    query  = url.substring(1);\r\n\r\n  const urlParams = {};\r\n  while (match = search.exec(query))\r\n    urlParams[decode(match[1])] = decode(match[2]);\r\n\r\n  return urlParams;\r\n}","/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\nexport function buildTag(tagName, options, transform = x => x) {\r\n  return (source) => {\r\n    const attrs = [];\r\n    for (let k in options) {\r\n      options.hasOwnProperty(k) && attrs.push(`${k}=${options[k]}`);\r\n    }\r\n\r\n    return `<${tagName} ${attrs.join(' ')}>${transform(source)}</${tagName}>`;\r\n  };\r\n}","/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\nexport const defaultHtml =\r\n  `\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width\">\r\n    <title>RxJS in Action</title>\r\n  </head>\r\n  <body></body>\r\n</html>\r\n`.trim();","/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\nexport function consoleProxy(console = window.console) {\r\n  if(console && console.log) {\r\n    //Set up iframe for redirection\r\n    let iframe = parent.document.getElementById('console');\r\n    let consoleFrame = iframe.contentWindow || iframe.contentDocument;\r\n    if (consoleFrame.document) consoleFrame = consoleFrame.document;\r\n    let write = (frame => {\r\n      return content => {\r\n        frame.open();\r\n        frame.write(content);\r\n        frame.close();\r\n      };\r\n    })(consoleFrame);\r\n    write(''); // clear contents on change\r\n\r\n    window.console = {\r\n      log: (val) => {\r\n        let previous = consoleFrame.body.innerHTML || '';\r\n        write(previous.trim() + \"<br />\" + val);\r\n      },\r\n      warn: (val) => {\r\n        let previous = consoleFrame.body.innerHTML || '';\r\n        write(previous.trim() + \"<br />\" + val);\r\n      },\r\n      error: (val) => {\r\n        let previous = consoleFrame.body.innerHTML || '';\r\n        write(previous.trim() + \"<br />\" + val);\r\n      }\r\n    };\r\n  }\r\n}","/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\n'use strict';\r\n\r\nimport {getUrlParams} from './utils/url';\r\nimport {buildTag} from \"./utils/tag\";\r\nimport {defaultHtml} from \"./initial\";\r\nimport {consoleProxy} from \"./console\";\r\n\r\nRx.Observable.of('css', 'html', 'javascript')\r\n  .flatMap(\r\n    tag => Rx.Observable.fromEvent(document.getElementById('show-' + tag), 'click'),\r\n    (tag, value) => ({tag, el: value.target}))\r\n  .subscribe(({el, tag}) => {\r\n    const {classList, id} = el;\r\n\r\n    classList.toggle('btn-primary');\r\n    classList.toggle('btn-default');\r\n    classList.toggle('active');\r\n\r\n    document.getElementById(tag + '-container').classList.toggle('hidden');\r\n  });\r\n\r\n// Builds a new code editor on the page\r\nconst jsEditor = CodeMirror.fromTextArea(document.getElementById('javascript'), {\r\n  mode: \"javascript\",\r\n  theme: 'dracula',\r\n  lineNumbers: true,\r\n  readOnly: false,\r\n  value: 'Test'\r\n});\r\n\r\nconst htmlEditor = CodeMirror.fromTextArea(document.getElementById('html'), {\r\n  mode: 'htmlmixed',\r\n  theme: 'dracula',\r\n  lineNumbers: true,\r\n});\r\n\r\nhtmlEditor.setValue(defaultHtml);\r\n\r\nconst cssEditor = CodeMirror.fromTextArea(document.getElementById('css'), {\r\n  mode: 'css',\r\n  theme: 'dracula',\r\n  lineNumbers: true\r\n});\r\n\r\nconst exampleSelector = document.getElementById('example-change');\r\n\r\nconst urlParams = getUrlParams(window.location.search);\r\n\r\nRx.Observable.from(exampleSelector.getElementsByTagName('option'))\r\n  .filter(({value}) => value === urlParams['example'])\r\n  .take(1)\r\n  .subscribe(x => x.selected = 'selected');\r\n\r\nconst startWithIfPresent = (url, key) => source =>\r\n  url[key] ? source.startWith(url[key]) : source;\r\n\r\nRx.Observable.fromEvent(\r\n  exampleSelector,\r\n  'change',\r\n  (e) => e.target.value\r\n)\r\n  .let(startWithIfPresent(urlParams, 'example'))\r\n  .map((e) => e.split('.')) // Split the chapter and id\r\n  .filter(value => value.length === 2) // Sanity check\r\n  .flatMap(([chapter, id]) => {\r\n    return $.getJSON(`/rest/api/example/${chapter}/${id}`);\r\n  })\r\n  .subscribe(({js, css, html}) => {\r\n    js && jsEditor.setValue(js);\r\n    css && cssEditor.setValue(css);\r\n    html && htmlEditor.setValue(html);\r\n  });\r\n\r\nconst onCodeChange = (tag) => () => {\r\n  console.log(tag, '[UPDATE]: CODE CHANGE', Date.now());\r\n};\r\n\r\nconst html$ = Rx.Observable.fromEvent(htmlEditor.doc, 'change',\r\n  (instance, change) => instance.getValue())\r\n  .do(onCodeChange('html'))\r\n  .startWith(defaultHtml)\r\n  .debounceTime(1000);\r\n\r\n// Babel compiler options\r\nconst compile$ = Rx.Observable.of({\r\n  presets: ['es2015'],\r\n  // TODO Compile this separately and load independently\r\n  plugins: [\r\n    [\"transform-object-rest-spread\", {\"useBuiltIns\": true}]\r\n  ]\r\n});\r\n\r\nconst js$ = Rx.Observable.fromEvent(jsEditor, 'change',\r\n  (instance, change) => instance.getValue())\r\n  .do(onCodeChange('js'))\r\n  .startWith('console.log(\"Welcome to RxJS in Action Code!\")')\r\n  .debounceTime(1000)\r\n  .do(() => console.log('Compiling...'))\r\n  .combineLatest(compile$, (code, opts) => {\r\n    try {\r\n      return Babel.transform(code, opts).code\r\n    } catch (e) {\r\n      console.warn('Problem compiling the code', e);\r\n      //FIXME Probably should not be returning code that babel doesn't even know how to compile\r\n      return code;\r\n    }\r\n  })\r\n  .map(buildTag('script', {type: 'application/javascript'}, function (code) {\r\n    //Naive way of preventing this from polluting the global namespace\r\n    return `(${consoleProxy.toString().trim()})();(function wrapper() {${code}})()`;\r\n  }));\r\n\r\nconst css$ = Rx.Observable.fromEvent(cssEditor, 'change',\r\n  (instance, change) => instance.getValue())\r\n  .do(onCodeChange('css'))\r\n  .startWith('')\r\n  .debounceTime(1000)\r\n  .map(buildTag('style'));\r\n\r\nconst update$ = js$.combineLatest(html$, css$,\r\n  (javascript, html, css) => ({html, javascript, css}));\r\n\r\nexport const runtime$ = update$\r\n  .throttleTime(1000)\r\n  .do(onCodeChange('combined'))\r\n  .map(contents => {\r\n    const {javascript, html, css} = contents;\r\n    let builder = [];\r\n\r\n    try {\r\n      const endOfHead = html.indexOf('</head>');\r\n      const endOfBody = html.indexOf('</body>');\r\n\r\n      const beforeCss = html.substring(0, endOfHead);\r\n      const afterCss = html.substring(endOfHead, endOfBody);\r\n      const afterJs = html.substring(endOfBody);\r\n\r\n      builder.push(beforeCss);\r\n      builder.push(css);\r\n      builder.push(afterCss);\r\n\r\n      builder.push(javascript);\r\n      builder.push(afterJs);\r\n    } catch (e) {\r\n      console.log('Could not render content! ', e);\r\n    }\r\n\r\n    return builder.join('\\n');\r\n  });\r\n","/**\r\n *  RxJS in action\r\n *  Chapter #\r\n *  @author Paul Daniels\r\n *  @author Luis Atencio\r\n */\r\n'use strict';\r\n\r\nimport {runtime$} from './editors';\r\n\r\n// Get the contents of the iframe\r\nconst doc = $('#output').contents();\r\n\r\nruntime$.subscribe(\r\n  content => {\r\n    // Rewrites the contents of the iframe\r\n    // Prevents carry over from previous examples\r\n    doc[0].open();\r\n    doc[0].write(content);\r\n    doc[0].close();\r\n  },\r\n  err => {\r\n    console.warn(\"Something went wrong! Please refresh the page.\", err)\r\n  });\r\n"],"names":["getUrlParams","url","match","pl","decode","s","decodeURIComponent","replace","query","substring","urlParams","search","exec","buildTag","tagName","options","transform","x","source","attrs","k","hasOwnProperty","push","join","defaultHtml","trim","consoleProxy","console","window","log","iframe","parent","document","getElementById","consoleFrame","contentWindow","contentDocument","write","open","content","close","val","previous","body","innerHTML","Rx","Observable","of","flatMap","fromEvent","tag","value","el","target","subscribe","classList","id","toggle","jsEditor","CodeMirror","fromTextArea","htmlEditor","setValue","cssEditor","exampleSelector","location","from","getElementsByTagName","filter","take","selected","startWithIfPresent","key","startWith","e","let","map","split","length","chapter","$","getJSON","js","css","html","onCodeChange","Date","now","html$","doc","instance","change","getValue","do","debounceTime","compile$","js$","combineLatest","code","opts","Babel","warn","type","toString","css$","update$","javascript","runtime$","throttleTime","contents","builder","endOfHead","indexOf","endOfBody","beforeCss","afterCss","afterJs","err"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}